input AddEmote {
	id: EmoteSetEmoteId!
	overrideConflicts: Boolean
	zeroWidth: Boolean
}

type AdminPermission {
	admin: Boolean!
	bypassRateLimit: Boolean!
	superAdmin: Boolean!
}

type BadgePermission {
	admin: Boolean!
	assign: Boolean!
	manage: Boolean!
}


type Color {
	a: Int!
	b: Int!
	g: Int!
	hex: String!
	r: Int!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339")

type Emote {
	aspectRatio: Float!
	attribution: [EmoteAttribution!]!
	channels(page: Int, perPage: Int): UserSearchResult!
	defaultName: String!
	events(page: Int, perPage: Int): [EmoteEvent!]!
	flags: EmoteFlags!
	id: Id!
	images: [Image!]!
	inEmoteSets(emoteSetIds: [Id!]!): [EmoteInEmoteSetResponse!]!
	owner: User
	ownerId: Id!
	ranking(ranking: Ranking!): Int
	scores: EmoteScores!
	searchUpdatedAt: DateTime
	tags: [String!]!
	updatedAt: DateTime!
}

type EmoteAttribution {
	addedAt: DateTime!
	user: User
	userId: Id!
}

type EmoteBatchOperation {
	delete(reason: String): [Emote!]!
	flags(flags: EmoteFlagsInput!): [Emote!]!
	merge(with: Id!): [Emote!]!
	name(name: String!): [Emote!]!
	owner(ownerId: Id!): [Emote!]!
	tags(tags: [String!]!): [Emote!]!
}

type EmoteEvent {
	actor: User
	actorId: Id
	createdAt: DateTime!
	data: EventEmoteData!
	id: Id!
	searchUpdatedAt: DateTime
	target: Emote!
	targetId: Id!
	updatedAt: DateTime!
}

type EmoteFlags {
	animated: Boolean!
	approvedPersonal: Boolean!
	defaultZeroWidth: Boolean!
	deniedPersonal: Boolean!
	nsfw: Boolean!
	private: Boolean!
	publicListed: Boolean!
}

input EmoteFlagsInput {
	animated: Boolean!
	approvedPersonal: Boolean!
	defaultZeroWidth: Boolean!
	deniedPersonal: Boolean!
	nsfw: Boolean!
	private: Boolean!
	publicListed: Boolean!
}

type EmoteInEmoteSetResponse {
	emote: EmoteSetEmote
	emoteSetId: Id!
}

type EmoteModerationRequestPermission {
	admin: Boolean!
	manage: Boolean!
}

type EmoteOperation {
	delete(reason: String): Emote!
	flags(flags: EmoteFlagsInput!): Emote!
	merge(with: Id!): Emote!
	name(name: String!): Emote!
	owner(ownerId: Id!): Emote!
	tags(tags: [String!]!): Emote!
}

type EmotePermission {
	admin: Boolean!
	delete: Boolean!
	edit: Boolean!
	manageAny: Boolean!
	merge: Boolean!
	upload: Boolean!
	viewUnlisted: Boolean!
}

type EmoteQuery {
	emote(id: Id!): Emote
	search(filters: Filters, page: Int, perPage: Int, query: String, sort: Sort!, tags: Tags): EmoteSearchResult!
}

type EmoteScores {
	topAllTime: Int!
	topDaily: Int!
	topMonthly: Int!
	topWeekly: Int!
	trendingDay: Int!
	trendingMonth: Int!
	trendingWeek: Int!
}

type EmoteSearchResult {
	items: [Emote!]!
	pageCount: Int!
	totalCount: Int!
}

type EmoteSet {
	capacity: Int
	description: String
	emotes(page: Int, perPage: Int): EmoteSetEmoteSearchResult!
	id: Id!
	kind: EmoteSetKind!
	name: String!
	owner: User
	ownerId: Id
	searchUpdatedAt: DateTime
	tags: [String!]!
	updatedAt: DateTime!
}

type EmoteSetEmote {
	addedAt: DateTime!
	addedById: Id
	alias: String!
	emote: Emote
	flags: EmoteSetEmoteFlags!
	id: Id!
	originSetId: Id
}

type EmoteSetEmoteFlags {
	overrideConflicts: Boolean!
	zeroWidth: Boolean!
}

input EmoteSetEmoteFlagsInput {
	overrideConflicts: Boolean!
	zeroWidth: Boolean!
}

input EmoteSetEmoteId {
	alias: String
	emoteId: Id!
}

type EmoteSetEmoteSearchResult {
	items: [EmoteSetEmote!]!
	pageCount: Int!
	totalCount: Int!
}

enum EmoteSetKind {
	GLOBAL
	NORMAL
	PERSONAL
	SPECIAL
}

type EmoteSetOperation {
	addEmote(emote: AddEmote!): EmoteSet!
	capacity(capacity: Int!): EmoteSet!
	create(name: String!): EmoteSet!
	delete: Boolean!
	name(name: String!): EmoteSet!
	removeEmote(id: EmoteSetEmoteId!): EmoteSet!
	updateEmoteAlias(alias: String!, id: EmoteSetEmoteId!): EmoteSetEmote!
	updateEmoteFlags(flags: EmoteSetEmoteFlagsInput!, id: EmoteSetEmoteId!): EmoteSetEmote!
}

type EmoteSetPermission {
	admin: Boolean!
	assign: Boolean!
	manage: Boolean!
	manageAny: Boolean!
	manageGlobal: Boolean!
	manageSpecial: Boolean!
	resize: Boolean!
}

type EmoteSetQuery {
	emoteSet(id: Id!): EmoteSet
	emoteSets(ids: [Id!]!): [EmoteSet!]!
}

type EntitlementEdgeAnyBadge {
	from: EntitlementNodeAny!
	to: EntitlementNodeBadge!
}

type EntitlementEdgeAnyPaint {
	from: EntitlementNodeAny!
	to: EntitlementNodePaint!
}

union EntitlementNodeAny = EntitlementNodeUser | EntitlementNodeRole | EntitlementNodeBadge | EntitlementNodePaint | EntitlementNodeEmoteSet | EntitlementNodeProduct | EntitlementNodeSubscriptionBenefit | EntitlementNodeSubscription | EntitlementNodeSpecialEvent | EntitlementNodeGlobalDefaultEntitlementGroup

type EntitlementNodeBadge {
	badgeId: Id!
}

type EntitlementNodeEmoteSet {
	emoteSet: EmoteSet!
	emoteSetId: Id!
}

type EntitlementNodeGlobalDefaultEntitlementGroup {
	noop: Boolean! @deprecated
}

type EntitlementNodePaint {
	paint: Paint!
	paintId: Id!
}

type EntitlementNodeProduct {
	productId: ProductId!
}

type EntitlementNodeRole {
	role: Role!
	roleId: Id!
}

type EntitlementNodeSpecialEvent {
	specialEventId: Id!
}

type EntitlementNodeSubscription {
	subscriptionId: SubscriptionId!
}

type EntitlementNodeSubscriptionBenefit {
	subscriptionBenefit: SubscriptionBenefit!
	subscriptionBenefitId: Id!
}

type EntitlementNodeUser {
	user: User!
	userId: Id!
}

union EventEmoteData = EventEmoteDataUpload | EventEmoteDataProcess | EventEmoteDataChangeName | EventEmoteDataMerge | EventEmoteDataChangeOwner | EventEmoteDataChangeTags | EventEmoteDataChangeFlags | EventEmoteDataDelete

type EventEmoteDataChangeFlags {
	newFlags: EmoteFlags!
	oldFlags: EmoteFlags!
}

type EventEmoteDataChangeName {
	newName: String!
	oldName: String!
}

type EventEmoteDataChangeOwner {
	newOwner: User
	newOwnerId: Id!
	oldOwner: User
	oldOwnerId: Id!
}

type EventEmoteDataChangeTags {
	newTags: [String!]!
	oldTags: [String!]!
}

type EventEmoteDataDelete {
	"""
	Always false
	"""
	noop: Boolean! @deprecated
}

type EventEmoteDataMerge {
	newEmote: Emote!
	newEmoteId: Id!
}

type EventEmoteDataProcess {
	event: ImageProcessorEvent!
}

type EventEmoteDataUpload {
	"""
	Always false
	"""
	noop: Boolean! @deprecated
}

union EventUserData = EventUserDataCreate | EventUserDataChangeActivePaint | EventUserDataChangeActiveBadge | EventUserDataChangeActiveEmoteSet | EventUserDataAddConnection | EventUserDataRemoveConnection | EventUserDataDelete

type EventUserDataAddConnection {
	addedPlatform: Platform!
}

type EventUserDataChangeActiveBadge {
	newBadgeId: Id
	oldBadgeId: Id
}

type EventUserDataChangeActiveEmoteSet {
	newEmoteSet: EmoteSet
	newEmoteSetId: Id
	oldEmoteSet: EmoteSet
	oldEmoteSetId: Id
}

type EventUserDataChangeActivePaint {
	newPaint: Paint
	newPaintId: Id
	oldPaint: Paint
	oldPaintId: Id
}

type EventUserDataCreate {
	"""
	Always false
	"""
	noop: Boolean! @deprecated
}

type EventUserDataDelete {
	"""
	Always false
	"""
	noop: Boolean! @deprecated
}

type EventUserDataRemoveConnection {
	removedPlatform: Platform!
}

input Filters {
	animated: Boolean
	defaultZeroWidth: Boolean
	"""
	defaults to false when unset
	"""
	exactMatch: Boolean
	nsfw: Boolean
}

type FlagPermission {
	hidden: Boolean!
}



scalar Id

type Image {
	frameCount: Int!
	height: Int!
	mime: String!
	scale: Int!
	size: Int!
	url: String!
	width: Int!
}

enum ImageProcessorEvent {
	CANCEL
	FAIL
	START
	SUCCESS
}


"""
A scalar that can represent any JSON Object value.
"""
scalar JSONObject

type Mutation {
	emote(id: Id!): EmoteOperation!
	emoteSet(id: Id!): EmoteSetOperation!
	emotes(ids: [Id!]!): EmoteBatchOperation!
}

type Paint {
	createdById: Id!
	data: PaintData!
	description: String
	id: Id!
	name: String!
	searchUpdatedAt: DateTime
	tags: [String!]!
	updatedAt: DateTime!
}

type PaintData {
	layers: [PaintLayer!]!
	shadows: [PaintShadow!]!
}

type PaintGradientStop {
	at: Float!
	color: Color!
}

type PaintLayer {
	id: Id!
	opacity: Float!
	ty: PaintLayerType!
}

union PaintLayerType = PaintLayerTypeSingleColor | PaintLayerTypeLinearGradient | PaintLayerTypeRadialGradient | PaintLayerTypeImage

type PaintLayerTypeImage {
	images: [Image!]!
}

type PaintLayerTypeLinearGradient {
	angle: Int!
	repeating: Boolean!
	stops: [PaintGradientStop!]!
}

type PaintLayerTypeRadialGradient {
	repeating: Boolean!
	shape: PaintRadialGradientShape!
	stops: [PaintGradientStop!]!
}

type PaintLayerTypeSingleColor {
	color: Color!
}

type PaintPermission {
	admin: Boolean!
	assign: Boolean!
	manage: Boolean!
}

enum PaintRadialGradientShape {
	CIRCLE
	ELLIPSE
}

type PaintShadow {
	blur: Float!
	color: Color!
	offsetX: Float!
	offsetY: Float!
}

type Permissions {
	admin: AdminPermission!
	badge: BadgePermission!
	emote: EmotePermission!
	emoteModerationRequest: EmoteModerationRequestPermission!
	emoteModerationRequestLimit: Int
	emoteModerationRequestPriority: Int
	emoteSet: EmoteSetPermission!
	emoteSetCapacity: Int
	emoteSetLimit: Int
	flags: FlagPermission!
	paint: PaintPermission!
	personalEmoteSetCapacity: Int
	ratelimits: JSONObject!
	role: RolePermission!
	ticket: TicketPermission!
	user: UserPermission!
}

enum Platform {
	DISCORD
	GOOGLE
	KICK
	TWITCH
}

scalar ProductId

type Query {
	emoteSets: EmoteSetQuery!
	emotes: EmoteQuery!
	search: SearchQuery!
	users: UserQuery!
}

enum Ranking {
	TOP_ALL_TIME
	TOP_DAILY
	TOP_MONTHLY
	TOP_WEEKLY
	TRENDING_DAILY
	TRENDING_MONTHLY
	TRENDING_WEEKLY
}

type Role {
	color: Color
	createdBy: User
	createdById: Id!
	description: String
	id: Id!
	name: String!
	searchUpdatedAt: DateTime
	tags: [String!]!
	updatedAt: DateTime!
}

type RolePermission {
	admin: Boolean!
	assign: Boolean!
	manage: Boolean!
}

type SearchQuery {
	all(page: Int, perPage: Int, query: String): SearchResultAll!
}

type SearchResultAll {
	emotes: EmoteSearchResult!
	users: UserSearchResult!
}

input Sort {
	order: SortOrder!
	sortBy: SortBy!
}

enum SortBy {
	NAME_ALPHABETICAL
	TOP_ALL_TIME
	TOP_DAILY
	TOP_MONTHLY
	TOP_WEEKLY
	TRENDING_DAILY
	TRENDING_MONTHLY
	TRENDING_WEEKLY
	UPLOAD_DATE
}

enum SortOrder {
	ASCENDING
	DESCENDING
}


type SubscriptionBenefit {
	id: Id!
	name: String!
}

scalar SubscriptionId

input Tags {
	match: TagsMatch!
	tags: [String!]!
}

enum TagsMatch {
	ALL
	ANY
}

type TicketPermission {
	admin: Boolean!
	create: Boolean!
	manageAbuse: Boolean!
	manageBilling: Boolean!
	manageGeneric: Boolean!
	message: Boolean!
}

type User {
	connections: [UserConnection!]!
	editableEmoteSetIds: [Id!]!
	editors: [UserEditor!]!
	events(page: Int, perPage: Int): [UserEvent!]!
	highestRoleColor: Color
	highestRoleRank: Int!
	id: Id!
	inventory: UserInventory!
	mainConnection: UserConnection
	ownedEmoteSets: [EmoteSet!]!
	ownedEmotes: [Emote!]!
	permissions: Permissions!
	roleIds: [Id!]!
	roles: [Role!]!
	searchUpdatedAt: DateTime
	style: UserStyle!
	updatedAt: DateTime!
}

type UserConnection {
	allowLogin: Boolean!
	linkedAt: DateTime!
	platform: Platform!
	platformAvatarUrl: String
	platformDisplayName: String!
	platformId: String!
	platformUsername: String!
	updatedAt: DateTime!
}

type UserEditor {
	addedAt: DateTime!
	addedById: Id!
	editor: User
	editorId: Id!
	notes: String
	searchUpdatedAt: DateTime
	state: UserEditorState!
	updatedAt: DateTime!
	userId: Id!
}

enum UserEditorState {
	ACCEPTED
	PENDING
	REJECTED
}

type UserEvent {
	actor: User
	actorId: Id
	createdAt: DateTime!
	data: EventUserData!
	id: Id!
	searchUpdatedAt: DateTime
	target: User!
	targetId: Id!
	updatedAt: DateTime!
}

type UserInventory {
	badges: [EntitlementEdgeAnyBadge!]!
	paints: [EntitlementEdgeAnyPaint!]!
}

type UserPermission {
	admin: Boolean!
	billing: Boolean!
	inviteEditors: Boolean!
	login: Boolean!
	manageAny: Boolean!
	manageBilling: Boolean!
	moderate: Boolean!
	useBadge: Boolean!
	useCustomProfilePicture: Boolean!
	usePaint: Boolean!
	usePersonalEmoteSet: Boolean!
	viewHidden: Boolean!
}

type UserProfilePicture {
	id: Id!
	images: [Image!]!
	updatedAt: DateTime!
	userId: Id!
}

type UserQuery {
	me: User
	user(id: Id!): User
}

type UserSearchResult {
	items: [User!]!
	pageCount: Int!
	totalCount: Int!
}

type UserStyle {
	activeBadgeId: Id
	activeEmoteSet: EmoteSet
	activeEmoteSetId: Id
	activePaint: Paint
	activePaintId: Id
	activeProfilePicture: UserProfilePicture
	activeProfilePictureId: Id
	pendingProfilePictureId: Id
}

directive @deprecated(reason: String = "No longer supported") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
extend schema @link(
	url: "https://specs.apollo.dev/federation/v2.3",
	import: ["@key", "@tag", "@shareable", "@inaccessible", "@override", "@external", "@provides", "@requires", "@composeDirective", "@interfaceObject"]
)
